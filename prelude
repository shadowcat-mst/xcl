# let set f fexpr _if
# lang.is_list, lang.is_valid_index, environment.clone
# lang.tailcall, lang.expr, lang.exec
# int.incr, 

let ? let
let $ [f (x) { let e eval(x); _if lang.is_list(x) e.0 e }]
let @ $

  # from inside if:
    # the latter would work better in a macro
    # @(lang.cond rest.0 => (_ => rest.0()), _ => ()),

let if [fexpr (cond, block, @rest) {
  # @rest is assumed to be either (elseblock) or ()
  let myenv [environment.clone env]
  let call [ _if
    [ lang.expr myenv cond ]
    block
    [ _if rest.0 rest.0 {} ]
  ]
  lang.exec myenv call
}]

let while [fexpr (cond, block) {
  let myenv [environment.clone env]
  if (lang.expr myenv cond) {
    lang.exec myenv block
    lang.tailcall cond block
  }
}]

let foreach [fexpr (name, args, block) {
  let idx -1
  let myenv [environment.clone env]
  let myargs [lang.expr myenv args]
  while (list.is_valid_index myargs [ int.incr idx ]) {
    let thisenv [ environment.clone myenv ]
    let set_x ([ sym set ], [ sym x ], myargs(idx))
    lang.exec thisenv @(set_x)
    lang.exec thisenv block
  }
}]
