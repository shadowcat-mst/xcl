package XCL::Values;

use strictures 2;
use curry;
use Exporter 'import';
use experimental 'signatures';

# string, bytes
# float, int
# name, bool
# list, dict
# call, block

package XCL::V {
  XCL::Values->import(qw(Val Err));
  sub eval ($self, $env) { Val($self) }
  sub data ($self) { $self->{data} }
  sub metadata ($self) { $self->{metadata} }
  sub invoke ($self, @) { die "Not invokable: $self" }
  sub is ($self, $type) {
    $self->isa("XCL::V::${type}");
  }
  sub bool ($self) { Err('CANT_BOOLEAN') }
  sub string ($self) { Err('CANT_STRINGIFY') }
}

sub list ($env, @args) {
  my @ret;
  foreach my $arg (@args) {
    my $r = $arg->eval($env);
    return $r unless $r->is_ok;
    push @ret, $r->val;
  }
  return Val(List(\@ret));
}

BEGIN {

  our @Types = qw(
    String Bytes
    Float Int
    Bool
    Fexpr Dict List
    Name
    Call
    Result
    Bultin
  );

  our @EXPORT = (@Types, qw(Val Err list));

  foreach my $type (@Types) {
    my $class = "XCL::V::${type}";
    {
      no strict 'refs';
      @{"${class}::ISA"} = qw(XCL::V);
      *{$type} = sub ($data, $metadata = {}) {
        bless({ data => $data, metadata => $metadata }, $class);
      }
    }
  }
}

sub Val ($val, $metadata = {}) { Result({ val => $val }, $metadata) }
sub Err ($err, $metadata = {}) { Result({ err => $err }, $metadata) }

sub XCL::V::Escape::eval ($self, $env) { Val($self->data) }

sub XCL::V::Call::eval ($self, $env) {
  my ($command, @args) = @{$self->data};
  if ((my $res = $command->eval($env))->is_ok) {
    return $res->val->invoke($env, @args);
  } else {
    return $res;
  }
}

sub XCL::V::Name::eval ($self, $env) { $env->get($self->data) }

sub XCL::V::Fexpr::invoke ($self, @args) {
  my ($argspec, $env, $body) = @{$self->data}{qw(argspec env body)};
  my %merge; @merge{@$argspec} = @args;
  $body->eval($env->derive(\%merge));
}

package XCL::V::Dict {
  XCL::Values->import(qw(Result Val Err List));
  sub get ($self, $key) {
    my $dict = $self->data;
    Result({
      ($dict->{$key}
        ? (val => $dict->{$key})
        : (err => 'NO_SUCH_VALUE')
      ),
      set => $self->curry::weak::set($key),
    });
  }
  sub set ($self, $key, $value) {
    return Val($self->data->{$key} = $value);
  }
  sub invoke ($self, $string) {
    return Err('NOT_A_STRING')
      unless $string->is('String');
    $self->get($self, $string->data);
  }
  sub derive ($self, $merge = {}) {
    bless(
      { data => [ Dict($merge), $self ], metadata => {} },
      'XCL::V::Dict::Layered'
    );
  }
  sub has_key ($self, $key) {
    $self->data->{$key} ? 1 : 0;
  }
  sub keys ($self) {
    List([ map String($_), sort keys %{$self->data} ]);
  }
  sub values ($self) {
    List([ @{$self->data}{sort CORE::keys %{$self->data}} ]);
  }
}

package XCL::V::Dict::Layered {
  our @ISA = qw(XCL::V);
  XCL::Values->import(qw(Result Val Err List));
  sub is ($self, $thing) { return $thing eq 'Dict' }
  sub get ($self, $key) {
    foreach my $layer (@{$self->data}) {
      next unless $layer->has_key($key);
      return $layer->get($key);
    }
    Result({
      err => 'NO_SUCH_VALUE',
      set => $self->curry::weak::set($key),
    });
  }
  sub set ($self, $key, $value) {
    $self->data->[0]->set($key, $value);
  }
  sub invoke ($self, $string) {
    return Err('NOT_A_STRING')
      unless $string->is('String');
    $self->get($self, $string->data);
  }
  sub derive ($self, $merge = {}) {
    bless(
      { data => [ Dict($merge), @{$self->data} ], metadata => {} },
      'XCL::V::Dict::Layered'
    );
  }
  sub has_key ($self, $key) {
    foreach my $layer (@{$self->data}) {
      return 1 if $layer->has_key($key);
    }
    return 0;
  }
  sub _keys ($self) {
    my @k = map $_->keys, @{$self->data};
    sort do { my %s; grep !$s{$_}++, @k };
  }
  sub keys ($self) {
    List([ map String($_), @{$self->_keys} ]);
  }
  sub values ($self) {
    List([ map $self->get($_), @{$self->_keys} ]);
  }
}

package XCL::V::List {
  XCL::Values->import(qw(Result Val Err List));
  sub get ($self, $idx) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    Result({
     ($#$ary <= $idx
       ? (val => $ary->[$idx])
       : (err => 'NO_SUCH_VALUE')),
     (set => $self->curry::weak::set($idx)),
    });
  }
  sub set ($self, $idx, $value) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    return Err('NO_SUCH_INDEX') if $idx > @$ary;
    return Val($ary->[$idx] = $value);
  }
  sub invoke ($self, $int) {
    return Err('NOT_AN_INT') unless $int->is('Int');
    $self->get($self, $int->data);
  }
  sub keys ($self) {
    my $ary = $self->data;
    return List([ map Int($_), 0 .. $ary ]);
  }
  sub values ($self) {
    return List($self->data);
  }
}

package XCL::V::Result {
  sub is_ok ($self) { exists $self->data->{val} }
  sub val ($self) { $self->data->{val} }
  sub err ($self) { $self->data->{err} }
  sub can_set ($self) { exists $self->data->{set} }
  sub set ($self, $value) {
    $self->data->{set}->($value);
  }
}

sub XCL::V::Builtin::invoke ($self, @args) { $self->data->(@args) }

package XCL::Builtins {
  XCL::Values->import(qw(Val Err Result List list));
  sub progn ($env, @args) {
    my $res;
    foreach my $arg (@args) {
      $res = $arg->eval($env);
      return $res unless $res->is_ok;
    }
    return $res;
  }
  sub set ($env, $set, $valproto) {
    my $place = $env->eval($set);
    return Err('NOT_SETTABLE') unless $place->can_set;
    my $valres = $env->eval($valproto);
    return $valres unless $valres->is_ok;
    return $place->set($valres->val);
  }
  sub let ($env, $name) {
    return Err('NOT_A_NAME') unless $name->is('Name');
    return Result({
      err => 'LET_REQUIRES_SET',
      set => $env->curry::weak::set($name->data),
    });
  }
}

package XCL::Builtins {
  my $MAX_SAFE_INT = 2**53;
  sub add {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($first, @rest) = $res->val->values;
    my $type = ref($first);
    die "Incorrect types" if grep ref($_) ne $type, @rest;
    my $acc = $first->data;
    foreach my $val (map $_->data, @rest) {
      if ($type =~ /Int$/ and $MAX_SAFE_INT - $acc > $val) {
        return Err('INT_OVERFLOW');
      }
      $acc += $val;
    }
    Val(bless({ data => $acc }, $type));
  }
  sub multiply {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($first, @rest) = $res->val->values;
    my $type = ref($first);
    die "Incorrect types" if grep ref($_) ne $type, @rest;
    my $acc = $first->data;
    foreach my $val (map $_->data, @rest) {
      if ($type =~ /Int$/ and $MAX_SAFE_INT / $acc > $val) {
        return Err('INT_OVERFLOW');
      }
      $acc *= $val;
    }
    Val(bless({ data => $acc }, $type));
  }
  sub subtract {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($l, $r) = $res->val->values;
    # type check here
    Val(bless({ data => $l->data - $r->data }, ref($l)));
  }
  sub divide {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($l, $r) = $res->val->values;
    # type check here (numeric is enough)
    Val(Float($l->data / $r->data));
  }
  sub int {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($v) = $res->val->values;
    return err('BAD_TYPE') unless $v->is('Int') or $v->is('Float');
    return Val(Int(int($v->data)));
  }
  sub float {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($v) = $res->val->values;
    return err('BAD_TYPE') unless $v->is('Int') or $v->is('Float');
    return Val(Float($v->data));
  }
}

sub XCL::V::Bool::bool ($self) { Val($self) }

sub XCL::V::List::bool ($self) { Val(Bool(@{$self->data} ? 1 : 0)) }

sub XCL::V::Dict::bool ($self) { Val(Bool(keys %{$self->data} ? 1 : 0)) }

sub XCL::V::String::bool ($self) { Val(Bool(length($self->data) ? 1 : 0)) }

sub XCL::V::Int::bool ($self) { Val(Bool($self->data == 0 ? 0 : 1)) }
sub XCL::V::Float::bool ($self) { Val(Bool($self->data == 0 ? 0 : 1)) }

sub XCL::Builtins::if ($env, $cond, $true, $false = undef) {
  my $denv = $env->derive;
  my $res = $cond->eval($denv);
  return $res unless $res->is_ok;
  my $bool = $res->val->bool;
  return $bool unless $bool->is_ok;
  if ($bool->val->data) {
    my $ret = $true->eval($denv);
    return defined($false) ? $ret : Val($ret);
  }
  return $false->eval($denv) if defined($false);
  return Val(Err('NO_SUCH_VALUE'));
}

sub XCL::Builtins::while ($env, $cond, $body) {
  my $denv = $env->derive;
  my $did;
  WHILE: while (1) {
    my $res = $cond->eval($denv);
    return $res unless $res->is_ok;
    my $bool = $res->val->bool;
    return $bool unless $bool->is_ok;
    if ($bool->val->data) {
      $did ||= 1;
      my $benv = $denv->derive;
      my $res = $body->eval($benv);
      return $res unless $res->is_ok;
    } else {
      last WHILE;
    }
  }
  return Val(Bool($did));
}

sub XCL::V::String::string ($self) { Val($self) }

sub XCL::V::Int::string ($self) { Val(String(''.$self->data)) }
sub XCL::V::Float::string ($self) { Val(String(''.$self->data)) }

sub XCL::V::Bool::string ($self) {
  Val(String($self->data ? 'true' : 'false'))
}

sub XCL::Builtins::string ($env, @args) {
  my $res = list(@_);
  return $res unless $res->is_ok;
  my $str = '';
  foreach my $el ($res->val->values) {
    my $res = $el->string;
    return $res unless $res->is_ok;
    $str .= $res->val->data;
  }
  return Val(String($str));
}

package XCL::Builtins {
  BEGIN {
    my %ops = (
      gt => '>', ge => '>=', lt => '<', le => '<=',
      eq => '==', ne => '!=',
    );
    foreach my $key (sort keys %ops) {
      my $numop = $ops{$key};
      eval 'sub '.$key.' {
        my $res = list(@_);
        return $res unless $res->is_ok;
        my ($l, $r) = $res->val->values;
        if ($l->is("Int") or $l->is("Float")) {
          return Err("VALUE_TYPE") unless $r->is("Int") or $r->is("Float");
          return Val(Bool(($l->data '.$numop.' $r->data) ? 1 : 0));
        }
        return Err("VALUE_TYPE") unless $l->is("String") and $r->is("String");
        return Val(Bool(($l->data '.$key.' $r->data)));
      } 1' or die "Compilation failed for ${key}: $@";
    }
  }
}

1;
