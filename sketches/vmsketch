package XCL::Values;

use strictures 2;
use curry;
use Exporter 'import';
use experimental 'signatures';

# string, bytes
# float, int
# name, bool
# list, dict
# call, block

package XCL::V {
  sub eval ($self, $env) { XCL::Values::Result({ val => $self }) }
  sub data ($self) { $self->{data} }
  sub metadata ($self) { $self->{metadata} }
  sub invoke ($self, @) { die "Not invokable: $self" }
}

BEGIN {

  our @Types = qw(
    String Bytes
    Float Int
    Bool
    Fexpr Dict List
    Name
    Call
    Result
    Bultin
  );

  our @EXPORT = (@Types, qw(Val Err));

  foreach my $type (@Types) {
    my $class = "XCL::V::${type}";
    {
      no strict 'refs';
      @{"${class}::ISA"} = qw(XCL::V);
      *{$type} = sub ($data, $metadata = {}) {
        bless({ data => $data, metadata => $metadata }, $class);
      }
    }
  }
}

sub Val ($val, $metadata = {}) { Result({ val => $val }, $metadata) }
sub Err ($err, $metadata = {}) { Result({ err => $err }, $metadata) }

sub XCL::V::Escape::eval ($self, $env) { Val($self->data) }

sub XCL::V::Call::eval ($self, $env) {
  my ($command, @args) = @{$self->data};
  if ((my $res = $command->eval($env))->is_ok) {
    return $res->val->invoke($env, @args);
  } else {
    return $res;
  }
}

sub XCL::V::Name::eval ($self, $env) { $env->get($self->data) }

sub XCL::V::Fexpr::invoke ($self, @args) {
  my ($argspec, $env, $body) = @{$self->data}{qw(argspec env body)};
  my %merge; @merge{@$argspec} = @args;
  $body->eval($env->derive(\%merge));
}

package XCL::V::Dict {
  XCL::Values->import(qw(Result Val Err));
  sub get ($self, $key) {
    my $dict = $self->data;
    Result({
      ($dict->{$key}
        ? (val => $dict->{$key})
        : (err => 'NO_SUCH_VALUE')
      ),
      set => $self->curry::weak::set($key),
    });
  }
  sub set ($self, $key, $value) {
    return Val($self->data->{$key} = $value);
  }
  sub invoke ($self, $string) {
    return Err('NOT_A_STRING')
      unless $string->isa('DX::Value::String');
    $self->get($self, $string->data);
  }
}

package XCL::V::List {
  XCL::Values->import(qw(Result Val Err));
  sub get ($self, $idx) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    Result({
     ($#$ary <= $idx
       ? (val => $ary->[$idx])
       : (err => 'NO_SUCH_VALUE')),
     (set => $self->curry::weak::set($idx)),
    });
  }
  sub set ($self, $idx, $value) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    return Err('NO_SUCH_INDEX') if $idx > @$ary;
    return Val($ary->[$idx] = $value);
  }
  sub invoke ($self, $int) {
    return Err('NOT_AN_INT') unless $int->isa('DX::Value::Int');
    $self->get($self, $int->data);
  }
}

package XCL::V::Result {
  sub is_ok ($self) { exists $self->data->{val} }
  sub val ($self) { $self->data->{val} }
  sub err ($self) { $self->data->{err} }
  sub can_set ($self) { exists $self->data->{set} }
  sub set ($self, $value) {
    $self->data->{set}->($value);
  }
}

sub XCL::V::Builtin::invoke ($self, @args) { $self->data->(@args) }

package XCL::Builtins {
  XCL::Values->import(qw(Val Err Result List));
  sub _eval ($env, @args) {
    my @ret;
    foreach my $arg (@args) {
      my $r = $env->eval($arg);
      return $r unless $r->is_ok;
      push @ret, $r->val;
    }
    return Val(List(\@ret));
  }
  my $MAX_SAFE_INT = 2**53;
  sub plus {
    my $res = _eval(@_);
    return $res unless $res->is_ok;
    my ($first, @rest) = @{$res->val->data};
    my $type = ref($first);
    die "Incorrect types" if grep ref($_) ne $type, @rest;
    my $acc = $first->data;
    foreach my $val (map $_->data, @rest) {
      if ($type =~ /Int$/ and $MAX_SAFE_INT - $acc > $val) {
        return Err('INT_OVERFLOW');
      }
      $acc += $val;
    }
    Val(bless({ data => $acc }, $type));
  }
  sub progn ($env, @args) {
    my $res;
    foreach my $arg (@args) {
      $res = $arg->eval($env);
      return $res unless $res->is_ok;
    }
    return $res;
  }
  sub _if ($env, $cond, $true, $false) {
    my $res = $cond->eval($env);
    return $res unless $res->is_ok;
    return Err('NOT_A_BOOLEAN') unless $res->val->isa('XCL::V::Bool');
    return Val($res->val->data ? $true : $false);
  }
  sub set ($env, $set, $valproto) {
    my $place = $env->eval($set);
    return Err('NOT_SETTABLE') unless $place->can_set;
    my $valres = $env->eval($valproto);
    return $valres unless $valres->is_ok;
    return $place->set($valres->val);
  }
}

1;
