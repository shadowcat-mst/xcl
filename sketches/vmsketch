package XCL::Values;

use strictures 2;
use curry;
use Exporter 'import';
use experimental 'signatures';

# string, bytes
# float, int
# name, bool
# list, dict
# call, block

package XCL::V {
  XCL::Values->import(qw(Val Err Name String));
  sub eval ($self, $env) { Val($self) }
  sub data ($self) { $self->{data} }
  sub metadata ($self) { $self->{metadata} }
  sub invoke ($self, @) {
    Err([ Name('CANT_INVOKE') => String($self->display) ])
  }
  sub is ($self, $type) {
    $self->isa("XCL::V::${type}");
  }
  sub type ($self) {
    (split '::', ref($self))[-1];
  }
  sub display ($self, @) { $self->type.'()' }
  sub bool ($self) { Err([ Name('CANT_BOOLEAN') => String($self->type) ]) }
  sub string ($self) { Err([ Name('CANT_STRINGIFY') => String($self->type) ]) }
}

sub list ($env, @args) {
  my @ret;
  foreach my $arg (@args) {
    my $r = $arg->eval($env);
    return $r unless $r->is_ok;
    push @ret, $r->val;
  }
  return Val(List(\@ret));
}

BEGIN {

  our @Types = qw(
    String Bytes Float Int
    Bool Fexpr Dict List Name Call
    Result Var
    Native
    Environment
    Compound Lambda
  );

  our @EXPORT = (@Types, qw(Val Err list));

  foreach my $type (@Types) {
    my $class = "XCL::V::${type}";
    {
      no strict 'refs';
      @{"${class}::ISA"} = qw(XCL::V);
      *{$type} = sub ($data, $metadata = {}) {
        bless({ data => $data, metadata => $metadata }, $class);
      }
    }
  }

  $INC{"XCL/Values.pm"} = __FILE__;
}

sub Val ($val, $metadata = {}) { Result({ val => $val }, $metadata) }
sub Err ($err, $metadata = {}) {
  Result({ err => Call(List($err)) }, $metadata);
}

sub XCL::V::Escape::eval ($self, $env) { Val($self->data) }

sub XCL::V::Call::eval ($self, $env) {
  my ($command, @args) = @{$self->data->data};
  if ((my $res = $command->eval($env))->is_ok) {
    return $res->val->invoke($env, @args);
  } else {
    return $res;
  }
}

sub XCL::V::Call::display ($self, $depth) {
  return $self->SUPER::display(0) unless $depth;
  my $in_depth = $depth - 1;
  my @res;
  foreach my $val ($self->data->values) {
    push @res, $val->display($in_depth);
  }
  return '[ '.join(' ', @res).' ]';
}

sub XCL::V::Name::eval ($self, $env) { $env->get($self->data) }

sub XCL::V::Name::display ($self, @) { $self->data }

sub XCL::V::Fexpr::invoke ($self, @args) {
  my ($argnames, $env, $body) = @{$self->data}{qw(argnames env body)};
  my %merge; @merge{@$argnames} = map Val($_), @args;
  $body->eval($env->derive(\%merge));
}

sub XCL::V::Fexpr::display ($self, @) {
  return 'fexpr ('.join(', ', @{$self->data->{argnames}}).') { ... }';
}

sub XCL::V::Lambda::invoke ($self, $outer_env, @args) {
  my ($argnames, $env, $body) = @{$self->data}{qw(argnames env body)};
  my $argvalres = list($outer_env, @args);
  return $argvalres unless $argvalres->is_ok;
  my %merge; @merge{@$argnames} = map Val($_), $argvalres->val->values;
  $body->eval($env->derive(\%merge));
}

sub XCL::V::Lambda::display ($self, @) {
  return 'lambda ('.join(', ', @{$self->data->{argnames}}).') { ... }';
}

sub XCL::V::Compound::eval ($self, $env) {
  my ($val, @rest) = @{$self->data};
  my $res = $val->eval($env);
  return $res unless $res->is_ok;
  while (my $v = shift @rest) {
    my @v = $v;
    if ($v->is('Call') and $v->data->data->[0]->data eq 'list') {
      @v = @{$v->data->data}[1..$#{$v->data->data}];
    }
    $res = $res->val->invoke($env, @v);
    return $res unless $res->is_ok;
  }
  return $res;
}

package XCL::V::Dict {
  use XCL::Values;
  sub get ($self, $key) {
    my $dict = $self->data;
    Result({
      ($dict->{$key}
        ? (val => $dict->{$key})
        : (err => List([ Name('NO_SUCH_VALUE') => String($key) ]))
      ),
      set => $self->curry::weak::set($key),
    });
  }
  sub set ($self, $key, $value) {
    return Val($self->data->{$key} = $value);
  }
  sub invoke ($self, $, $string, @) {
    return Err([ Name('NOT_A_STRING') => String($string->type) ])
      unless $string->is('String');
    $self->get($string->data);
  }
  sub has_key ($self, $key) {
    $self->data->{$key} ? 1 : 0;
  }
  sub keys ($self) {
    map String($_), sort CORE::keys %{$self->data};
  }
  sub values ($self) {
    @{$self->data}{sort CORE::keys %{$self->data}};
  }
  sub pairs ($self) {
    my $d = $self->data;
    return List([ map List([ String($_), $d->{$_} ]), sort CORE::keys %$d ]);
  }
  sub display ($self, $depth) {
    return $self->SUPER::display(0) unless $depth;
    my $in_depth = $depth - 1;
    my @res;
    foreach my $key ($self->keys) {
      push @res, '('
        .$key->display($in_depth)
        .', '
        .$self->data->{$key->data}->display($in_depth)
        .')';
    }
    return '%('.join(', ', @res).')';
  }
}

sub XCL::V::Var::set_data ($self, $val) {
  Val($self->{data} = $val);
}

sub XCL::V::Var::invoke ($self, $env = undef) {
  my $set_data = $self->curry::weak::set_data;
  Result({
    val => $self->data,
    set => $set_data,
  });
}

sub XCL::V::Var::display ($self, $depth) {
  'Var('.$self->data->display($depth).')'
}

package XCL::V::Environment {
  use XCL::Values;
  sub get ($self, $key) {
    my $res = $self->data->get($key);
    return $res unless $res->is_ok;
    my $val = $res->val;
    return $val if $val->is('Result');
    return $val->invoke;
  }
  sub set ($self, $key, $value) {
    Val($self->data->data->{$key} = $value);
  }
  sub invoke ($self, $env, $string, @) {
    return Err([ Name('NOT_A_STRING') => String($string->type) ])
      unless $string->is('String');
    return $self->get($string->data);
  }
  sub derive ($self, $merge) {
    Environment(Dict({ %{$self->data->data}, %$merge }));
  }
  sub snapshot ($self) {
    Environment(Dict({ %{$self->data->data} }));
  }
  sub display ($self, $depth) {
    'Environment('.$self->data->display($depth).')'
  }
}

package XCL::V::List {
  use XCL::Values;
  sub get ($self, $idx) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    Result({
     ($idx <= $#$ary
       ? (val => $ary->[$idx])
       : (err => List([ Name('NO_SUCH_VALUE') => Int($idx) ]))),
     (set => $self->curry::weak::set($idx)),
    });
  }
  sub set ($self, $idx, $value) {
    die "NOT YET" if $idx < 0;
    my $ary = $self->data;
    return Err([ Name('NO_SUCH_INDEX') => Int($idx) ]) if $idx > @$ary;
    return Val($ary->[$idx] = $value);
  }
  sub invoke ($self, $, $idx, @) {
    return Err([ Name('NOT_AN_INT') => String($idx->type) ])
      unless $idx->is('Int');
    $self->get($idx->data);
  }
  sub keys ($self) {
    my $ary = $self->data;
    return map Int($_), 0 .. $ary;
  }
  sub values ($self) {
    return @{$self->data};
  }
  sub display ($self, $depth) {
    return $self->SUPER::display(0) unless $depth;
    my $in_depth = $depth - 1;
    my @res;
    foreach my $val ($self->values) {
      push @res, $val->display($in_depth);
    }
    return '('.join(', ', @res).')';
  }
}

package XCL::V::Result {
  sub is_ok ($self) { exists $self->data->{val} }
  sub val ($self) { $self->data->{val} }
  sub err ($self) { $self->data->{err} }
  sub can_set ($self) { exists $self->data->{set} }
  sub set ($self, $value) {
    $self->data->{set}->($value);
  }
  sub display ($self, $depth) {
    if ($self->is_ok) {
      return 'Val('.$self->val->display($depth).')';
    }
    return 'Err('.$self->err->display($depth).')';
  }
}

sub XCL::V::Native::invoke ($self, @args) { $self->data->(@args) }

package XCL::Builtins {
  use XCL::Values;
  sub progn ($env, @args) {
    my $res;
    foreach my $arg (@args) {
      $res = $arg->eval($env);
      return $res unless $res->is_ok;
    }
    return $res;
  }
  sub evaluate {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($thisenv, $thing) = @{$res->val->data};
    $thing->eval($thisenv);
  }
  sub set ($env, $set, $valproto) {
    my $place = $set->eval($env);
    return Err([ Name('NOT_SETTABLE') => String('FIXME') ])
      unless $place->can_set;
    my $valres = $valproto->eval($env);
    return $valres unless $valres->is_ok;
    return $place->set($valres->val);
  }
  sub var ($env, $name) {
    return Err([ Name('NOT_A_NAME') => String($name->type) ])
      unless $name->is('Name');
    my $_set = $env->curry::weak::set($name->data);
    return Result({
      err => List([ Name('INTRO_REQUIRES_SET') => String($name->data) ]),
      set => sub { $_set->(Var($_[0])) },
    });
  }
  sub id ($env, $thing) {
    $thing->eval($env);
  }
  sub fexpr ($env, $argspec, $block) {
    my (undef, @argspec) = @{$argspec->data->data};
    my @argnames = map $_->data, @argspec;
    Val(Fexpr({
      argnames => \@argnames,
      env => $env->snapshot,
      body => $block
    }));
  }
  sub lambda ($env, $argspec, $block) {
    my (undef, @argspec) = @{$argspec->data->data};
    my @argnames = map $_->data, @argspec;
    Val(Lambda({
      argnames => \@argnames,
      env => $env->snapshot,
      body => $block
    }));
  }
  sub current_env ($env) {
    Val($env);
  }
  sub is {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($thisval, $thing) = @{$res->val->data};
    return Err([ Name('NOT_A_STRING') => String($thing->type) ])
      unless $thing->is('String');
    return Bool($thisval->is($thing->data) ? 1 : 0);
  }
  sub dict ($env, @args) {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my @pairs = $res->val->values;
    return Err([ Name('NOT_PAIRS'), String('FIXME') ])
      if grep !($_->is('List') and @{$_->data} == 2), @pairs;
    return Val(Dict({
      map +($_->data->[0]->string->val->data, $_->data->[1]),
        @pairs
    }));
  }
}

package XCL::Builtins {
  my $MAX_SAFE_INT = 2**53;
  sub add {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($first, @rest) = $res->val->values;
    my $type = ref($first);
    return Err([
      Name('TYPES_MUST_MATCH') => map String($_->type), ($first, @rest)
    ]) if grep ref($_) ne $type, @rest;
    my $acc = $first->data;
    foreach my $val (map $_->data, @rest) {
      if ($type =~ /Int$/ and $MAX_SAFE_INT - $acc < $val) {
        return Err([ Name('INT_OVERFLOW') ]);
      }
      $acc += $val;
    }
    Val(bless({ data => $acc }, $type));
  }
  sub multiply {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($first, @rest) = $res->val->values;
    my $type = ref($first);
    die "Incorrect types" if grep ref($_) ne $type, @rest;
    my $acc = $first->data;
    foreach my $val (map $_->data, @rest) {
      if ($type =~ /Int$/ and $MAX_SAFE_INT / $acc > $val) {
        return Err([ Name('INT_OVERFLOW') ]);
      }
      $acc *= $val;
    }
    Val(bless({ data => $acc }, $type));
  }
  sub subtract {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($l, $r) = $res->val->values;
    # type check here
    Val(bless({ data => $l->data - $r->data }, ref($l)));
  }
  sub divide {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($l, $r) = $res->val->values;
    # type check here (numeric is enough)
    Val(Float($l->data / $r->data));
  }
  sub int {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($v) = $res->val->values;
    return Err([ Name('BAD_TYPE') => String($v->type) ])
      unless $v->is('Int') or $v->is('Float');
    return Val(Int(int($v->data)));
  }
  sub float {
    my $res = list(@_);
    return $res unless $res->is_ok;
    my ($v) = $res->val->values;
    return Err([ Name('BAD_TYPE') => String($v->type) ])
      unless $v->is('Int') or $v->is('Float');
    return Val(Float($v->data));
  }
}

sub XCL::V::Bool::bool ($self) { Val($self) }

sub XCL::V::List::bool ($self) { Val(Bool(@{$self->data} ? 1 : 0)) }

sub XCL::V::Dict::bool ($self) {
  Val(Bool(CORE::keys(%{$self->data}) ? 1 : 0))
}

sub XCL::V::String::bool ($self) { Val(Bool(length($self->data) ? 1 : 0)) }

sub XCL::V::Int::bool ($self) { Val(Bool($self->data == 0 ? 0 : 1)) }
sub XCL::V::Float::bool ($self) { Val(Bool($self->data == 0 ? 0 : 1)) }

sub XCL::Builtins::if ($env, $cond, $true, $false = undef) {
  my $denv = $env->derive;
  my $res = $cond->eval($denv);
  return $res unless $res->is_ok;
  my $bool = $res->val->bool;
  return $bool unless $bool->is_ok;
  if ($bool->val->data) {
    my $ret = $true->eval($denv);
    return defined($false) ? $ret : Val($ret);
  }
  return $false->eval($denv) if defined($false);
  return Val(Err([ Name('NO_SUCH_VALUE') => String('else') ]));
}

sub XCL::Builtins::while ($env, $cond, $body) {
  my $denv = $env->derive;
  my $did;
  WHILE: while (1) {
    my $res = $cond->eval($denv);
    return $res unless $res->is_ok;
    my $bool = $res->val->bool;
    return $bool unless $bool->is_ok;
    if ($bool->val->data) {
      $did ||= 1;
      my $benv = $denv->derive;
      my $res = $body->eval($benv);
      return $res unless $res->is_ok;
    } else {
      last WHILE;
    }
  }
  return Val(Bool($did));
}

sub XCL::V::String::string ($self) { Val($self) }
sub XCL::V::String::display ($self, @) { q{'}.$self->data.q{'} }

sub XCL::V::Int::string ($self) { Val(String($self->display)) }
sub XCL::V::Int::display ($self, @) { ''.$self->data }

sub XCL::V::Float::string ($self) { Val(String($self->display)) }
sub XCL::V::Float::display ($self, @) {
  my $str = ''.$self->data;
  if ($str =~ /^-?[0-9]+$/) { return "${str}.0" }
  return $str;
}

sub XCL::V::Bool::string ($self) {
  Val(String($self->display))
}

sub XCL::V::Bool::display ($self, @) {
 $self->data ? 'true' : 'false'
}

sub XCL::Builtins::string ($env, @args) {
  my $res = list(@_);
  return $res unless $res->is_ok;
  my $str = '';
  foreach my $el ($res->val->values) {
    my $res = $el->string;
    return $res unless $res->is_ok;
    $str .= $res->val->data;
  }
  return Val(String($str));
}

package XCL::Builtins {
  BEGIN {
    our %ops = (
      gt => '>', ge => '>=', lt => '<', le => '<=',
      eq => '==', ne => '!=',
    );
    foreach my $key (sort keys %ops) {
      my $numop = $ops{$key};
      eval 'sub '.$key.' {
        my $res = list(@_);
        return $res unless $res->is_ok;
        my ($l, $r) = $res->val->values;
        if ($l->is("Int") or $l->is("Float")) {
          return Err([ Name("VALUE_TYPE") => String($r->type) ])
            unless $r->is("Int") or $r->is("Float");
          return Val(Bool(($l->data '.$numop.' $r->data) ? 1 : 0));
        }
        return Err([ Name("VALUE_TYPE") => String($l->type) ])
          unless $l->is("String");
        return Err([ Name("VALUE_TYPE") => String($r->type) ])
          unless $r->is("String");
        return Val(Bool(($l->data '.$key.' $r->data)));
      } 1' or die "Compilation failed for ${key}: $@";
    }
  }
}

package XCL::Builtins::Call {
  use XCL::Values;
  sub make ($env, $lst) {
    my $proto = $lst->eval($env);
    return $proto unless $proto->is_ok;
    return Val(Call($proto->val));
  }
  no warnings 'redefine';
  sub list ($env, $call) {
    my $res = $call->eval($env);
    return $res unless $res->is_ok;
    my $data = $res->val->data;
    return Err([ Name('CALL_SHOULD_CONTAIN_LIST') => $data ])
      unless $data->is('List');
    return Val($data);
  }
}

package XCL::Builtins::List {
  use XCL::Values;
  sub make { list(@_) }
  sub count_of ($env, $lst) {
    my $proto = $lst->eval($env);
    return $proto unless $proto->is_ok;
    return Val(Int(scalar @{$proto->val->data}));
  }
}

package XCL::Builtins::Name {
  use XCL::Values;
  sub to_string ($env, $name) {
    Val(String($name->data));
  }
}

my $expand_ns = sub ($pkg, $ns) {
  map +($_ => Var(Native($pkg->can($_)))),
    grep /^[a-z]/,
    grep $pkg->can($_),
    CORE::keys %$ns;
};

our $Builtins = Environment(Dict {
  $expand_ns->('XCL::Builtins', \%XCL::Builtins::),
  Call => Val(Environment(
    Dict(+{ $expand_ns->('XCL::Builtins::Call', \%XCL::Builtins::Call::) })
  )),
  List => Val(Environment(
    Dict(+{ $expand_ns->('XCL::Builtins::List', \%XCL::Builtins::List::) })
  )),
  Name => Val(Environment(
    Dict(+{ $expand_ns->('XCL::Builtins::Name', \%XCL::Builtins::Name::) })
  )),
});

{
  my $builtins = $Builtins->data->data;
  my %ops = (
    %XCL::Builtins::ops,
    add => '+', multiply => '*', subtract => '-', divide => '/',
    id => '$', dict => '%',
  );
  $builtins->{$ops{$_}} = $builtins->{$_}
    for CORE::keys %ops;
}

1;
