let weave_call (call) {
  let call_list = call.list();
  if [ exists let op_idx = call_list
                             . pairs()
                             . where_val(_OPS.has)
                             . min_by_val(_OPS)
                             . keys ] {
    Call.make (
      call_list(op_idx),
      weave_call(Call.make call_list(0 .. op_idx-1)),
      weave_call(Call.make call_list(op_idx+1 .. call_list.last_index()),
    );
  } {
    Call.make weave_list(call_list);
  }
}

let weaver_for %(
  :Int $,
  :Float $,
  :String $,
  :List list => list.map(weave),
  :Dict dict => dict.map_val(weave),
  :Call weave_call,
);

let weave (args) {
  weaver_for(type_of args) args;
};
