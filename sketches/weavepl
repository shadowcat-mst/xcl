package XCL::Weaver;

use strict;
use warnings;
use XCL::Values;
use List::UtilsBy qw(min_by);

sub weave ($self, $env, $thing) {
  my $type = $thing->type;
  return $self->${\"_weave_${type}"}($env, $thing);
}

sub _weave_Int { $_[2] }
sub _weave_Float { $_[2] }
sub _weave_String { $_[2] }

sub _weave_Dict ($self, $env, $thing) {
  my $data = $thing->data;
  Dict({ map +($_ => $self->weave($env, $data->{$_})), sort keys %$data });
}

sub _weave_List ($self, $env, $thing) {
  my $data = $thing->data;
  List([ map $self->weave($env, $_), 0..$#$data ]);
}

sub _weave_Call ($self, $env, $thing) {
  $self->_weave_apply($env, \&Call, $thing):
}

sub _weave_Compound ($self, $env, $thing) {
  $self->_weave_apply($env, \&Compound, $thing):
}


# let _weave_Call (self, env, thing) {
#   self._weave_apply(env, Call, thing);
# }
# let _weave_Compound (self, env, thing) {
#   self._weave_apply(env, Compound, thing);
# }
# let _weave_apply (self, env, type, thing) {
#   let make = type.make;
#   let list = thing.to_list();
#   let ops = env.ops;
#   let op_indices = list . pairs
#     . where(_(1).is 'Name')
#     . where(ops.has_key _(1).to_string())
#     . map _(0);
#   if (op_indices) {
#     let min_idx = op_indices.min_by ops(list(_).to_string());
#     make(
#       list(min_idx),
#       self.weave(env, list(0..min_idx-1)),
#       self.weave(env, list(min_idx+1..list.last_idx())),
#     );
#   } {
#     make(self.weave(env, list));
#   }
# 

sub _weave_apply ($self, $env, $make, $thing) {
  my $list = $thing->data->data;
  my $ops = Name('ops')->eval($env);
  my @op_indices = grep $ops->has_key($list->[$_]),
    grep $list->[$_]->is('Name'),
      0..$#$list;
  return $make->($self->weave($env, $thing->data)) unless @op_indices;
  my $min_idx = min_by { $ops->get($list->[$_])->data } @op_indices;
  return Call([
    $list->{$min_idx},
    $self->weave($env, $make->([ @{$list}[0..$min_idx-1] ])),
    $self->weave($env, $make->([ @{$list}[$min_idx+1..$#$list] ])),
  ]);
}
