# Interp 2: Hacktastic Boogaloo

use strictures 2;
use feature 'say';
use experimental 'signatures';
use Import::Into;
use Scalar::Util qw(refaddr);

BEGIN {
  package XCL::Value;
  use Mu;
  use strictures 2;
  use experimental 'signatures';
  $INC{'XCL/Value.pm'} = __FILE__;
  ro 'data';
  sub type ($self) { (ref($self) =~ /([^:]+)$/)[0] }
}

BEGIN {
  foreach my $type (qw(Name String Int FExpr List Dict Block Call)) {
    my $class = "XCL::Value::${type}";
    Mu->import::into($class);
    $class->can('extends')->('XCL::Value');
    my $type_sub = sub { @_ ? $class->new(data => shift) : $class };
    { no strict 'refs'; *$type = $type_sub }
    my $is_type_sub = sub ($thing = $_) { $thing->isa($class) };
    { no strict 'refs'; *{"is_${type}"} = $is_type_sub }
  }
}

use experimental 'signatures';

sub evaluate ($env, $thing) {
  for ($thing) {
    is_Name and return $env->data->{$_->data}//die "No such name ${\$_->data}\n";;
    is_Call and return $_->call($env);
    is_List and return List[ map evaluate($env, $_), @{$thing->data} ];
  }
  return $thing;
}

sub XCL::Value::Call::call ($self, $env) {
  my ($command, @args) = @{$self->data};
  evaluate($env, $command)->call($env, @args);
}

sub XCL::Value::FExpr::call ($self, $env, @args) { $self->data->($env, @args) }

sub XCL::Value::Dict::call ($self, $env, $keyv) {
  is_String $keyv or die "Key type must be string, not ${\$keyv->type}\n";
  my $key = $keyv->data;
  die "No such key ${key}\n" unless my $value = $self->data->{$key};
  return $value;
}

sub XCL::Value::List::call ($self, $env, $idxv) {
  is_Int $idxv or die "Key type must be int, not ${\$idxv->type}\n";
  my $idx = $idxv->data;
  die "No such iindex ${idx}\n" unless my $value = $self->data->[$idx];
  return $value;
}

sub plus ($x, $y) {
  if ($x->type eq 'Int' and $y->type eq 'Int') {
    return Int($x->data + $y->data);
  }
  if ($x->type eq 'String' and $y->type eq 'String') {
    return String($x->data.$y->data);
  }
  die "No handler for (${\join(',',map $_->type, @_)})\n";
}

sub wrap ($thing) {
  return sub ($env, @args) {
    $thing->(map evaluate($env, $_), @args)
  };
}

my $plus = FExpr(wrap \&plus);

sub xcl_say ($thing) {
  my $to_say = do {
    local $_ = $thing;
    if (is_String) { q{'}.($_->data =~ s/([\\'])/\\$1/gr).q{'} }
    elsif (is_Int) { $_->data }
    else { $_->type.'(0x'.sprintf("%x", refaddr($_->data)).')' }
  };
  say $to_say
}

my $say = FExpr(wrap \&xcl_say);

sub let ($env, $name, $vproto) {
  die "First argument to let must be name\n" unless is_Name($name);
  $env->data->{$name->data} = evaluate($env, $vproto);
  return;
}

my $env = Dict {
  '+' => $plus, say => $say, three => Int(3), bob => String("Bob"),
  d => Dict({
    x => Int(1),
    y => Int(2),
  }),
  let => FExpr(\&let),
};

evaluate($env, Call[ Name('say'), String('Hello world') ]);
evaluate($env,
  Call[ Name('say'), Call[ Name('+'), String('Hello '), Name('bob') ] ]
);
evaluate($env,
  Call [ Name('say'), Call[ Name('d'), String('x') ] ]
);
evaluate($env,
  Call [ Name('say'), Name('d') ]
);
evaluate($env, Call[ Name('let'), Name('foo'), String('FOO!') ]);
evaluate($env, Call[ Name('say'), Name('foo') ]);
evaluate($env,
  Call[ Name('say'),
    Call[ List([ map Int($_), 3, 5, 7 ]), Int(1) ]
  ]
);
