#!perl

use Cwd qw(abs_path);
use XCL::Values;
use XCL::Class -strict;
use xcl::script ();

STDOUT->autoflush(1);

my $script = xcl::script->new->setup_scope;

my ($cfg_dir) = grep { -d $_ }
                  map { abs_path("$_/.xclsh").'/' }
                    $ENV{HOME}||();

if ($cfg_dir) {
  $script->scope->but_intro_as(\&Val,
    $script->scope->curry::set(CFG_DIR => String($cfg_dir))
  );
}

if ($cfg_dir and -f (my $rcfile = "${cfg_dir}rc")) {
  $script->scope->await::eval_file_inscope($rcfile)->get;
}

unless (@ARGV) {
  require Caroline;
  my $c = Caroline->new;
  my $scope = $script->scope;
  $scope->but_intro_as(\&Var, sub { $scope->await::set(PROMPT => '$ ') });
  if ($cfg_dir and -f (my $rcfile = "${cfg_dir}profile")) {
    $scope->await::eval_file_inscope($rcfile)->get;
  }
  while (defined(
    my $line = $c->readline(
      $scope->await::eval_concat(
        $scope->await::get('PROMPT')->get
      )->get->await::string->get->data
    )
  )) {
    if ($line =~ /\S/) {
      $c->history_add($line);
      unless (eval {
        my $res = $scope->await::eval_string_inscope($line);
        if ($res->is_ok) {
          print $res->val->display(-1)."\n";
        } else {
          print $res->display(8)."\n";
        }
        1;
      }) {
        print STDERR "Internal error: $@\n";
      }
    }
  }
  exit 0;
}

my $text = do {
  if (@ARGV == 1) {
    require Mojo::File;
    Mojo::File::path($ARGV[0])->slurp;
  } elsif (@ARGV == 2 and $ARGV[0] eq '-c') {
    $ARGV[1];
  } else {
    die "Usage:
  xclsh
  xclsh script
  xclsh -c 'command'\n";
  }
};

$script->inline_xcl($text)->run;
